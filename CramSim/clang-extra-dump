Enabled checks:
    clang-analyzer-apiModeling.StdCLibraryFunctions
    clang-analyzer-apiModeling.TrustNonnull
    clang-analyzer-apiModeling.google.GTest
    clang-analyzer-apiModeling.llvm.CastValue
    clang-analyzer-apiModeling.llvm.ReturnValue
    clang-analyzer-core.CallAndMessage
    clang-analyzer-core.DivideZero
    clang-analyzer-core.DynamicTypePropagation
    clang-analyzer-core.NonNullParamChecker
    clang-analyzer-core.NonnilStringConstants
    clang-analyzer-core.NullDereference
    clang-analyzer-core.StackAddrEscapeBase
    clang-analyzer-core.StackAddressEscape
    clang-analyzer-core.UndefinedBinaryOperatorResult
    clang-analyzer-core.VLASize
    clang-analyzer-core.builtin.BuiltinFunctions
    clang-analyzer-core.builtin.NoReturnFunctions
    clang-analyzer-core.uninitialized.ArraySubscript
    clang-analyzer-core.uninitialized.Assign
    clang-analyzer-core.uninitialized.Branch
    clang-analyzer-core.uninitialized.CapturedBlockVariable
    clang-analyzer-core.uninitialized.UndefReturn
    clang-analyzer-cplusplus.InnerPointer
    clang-analyzer-cplusplus.Move
    clang-analyzer-cplusplus.NewDelete
    clang-analyzer-cplusplus.NewDeleteLeaks
    clang-analyzer-cplusplus.PureVirtualCall
    clang-analyzer-cplusplus.SelfAssignment
    clang-analyzer-cplusplus.SmartPtr
    clang-analyzer-cplusplus.VirtualCallModeling
    clang-analyzer-deadcode.DeadStores
    clang-analyzer-fuchsia.HandleChecker
    clang-analyzer-nullability.NullPassedToNonnull
    clang-analyzer-nullability.NullReturnedFromNonnull
    clang-analyzer-nullability.NullabilityBase
    clang-analyzer-nullability.NullableDereferenced
    clang-analyzer-nullability.NullablePassedToNonnull
    clang-analyzer-nullability.NullableReturnedFromNonnull
    clang-analyzer-optin.cplusplus.UninitializedObject
    clang-analyzer-optin.cplusplus.VirtualCall
    clang-analyzer-optin.mpi.MPI-Checker
    clang-analyzer-optin.osx.OSObjectCStyleCast
    clang-analyzer-optin.osx.cocoa.localizability.EmptyLocalizationContextChecker
    clang-analyzer-optin.osx.cocoa.localizability.NonLocalizedStringChecker
    clang-analyzer-optin.performance.GCDAntipattern
    clang-analyzer-optin.performance.Padding
    clang-analyzer-optin.portability.UnixAPI
    clang-analyzer-osx.API
    clang-analyzer-osx.MIG
    clang-analyzer-osx.NSOrCFErrorDerefChecker
    clang-analyzer-osx.NumberObjectConversion
    clang-analyzer-osx.OSObjectRetainCount
    clang-analyzer-osx.ObjCProperty
    clang-analyzer-osx.SecKeychainAPI
    clang-analyzer-osx.cocoa.AtSync
    clang-analyzer-osx.cocoa.AutoreleaseWrite
    clang-analyzer-osx.cocoa.ClassRelease
    clang-analyzer-osx.cocoa.Dealloc
    clang-analyzer-osx.cocoa.IncompatibleMethodTypes
    clang-analyzer-osx.cocoa.Loops
    clang-analyzer-osx.cocoa.MissingSuperCall
    clang-analyzer-osx.cocoa.NSAutoreleasePool
    clang-analyzer-osx.cocoa.NSError
    clang-analyzer-osx.cocoa.NilArg
    clang-analyzer-osx.cocoa.NonNilReturnValue
    clang-analyzer-osx.cocoa.ObjCGenerics
    clang-analyzer-osx.cocoa.RetainCount
    clang-analyzer-osx.cocoa.RetainCountBase
    clang-analyzer-osx.cocoa.RunLoopAutoreleaseLeak
    clang-analyzer-osx.cocoa.SelfInit
    clang-analyzer-osx.cocoa.SuperDealloc
    clang-analyzer-osx.cocoa.UnusedIvars
    clang-analyzer-osx.cocoa.VariadicMethodTypes
    clang-analyzer-osx.coreFoundation.CFError
    clang-analyzer-osx.coreFoundation.CFNumber
    clang-analyzer-osx.coreFoundation.CFRetainRelease
    clang-analyzer-osx.coreFoundation.containers.OutOfBounds
    clang-analyzer-osx.coreFoundation.containers.PointerSizedValues
    clang-analyzer-security.FloatLoopCounter
    clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling
    clang-analyzer-security.insecureAPI.SecuritySyntaxChecker
    clang-analyzer-security.insecureAPI.UncheckedReturn
    clang-analyzer-security.insecureAPI.bcmp
    clang-analyzer-security.insecureAPI.bcopy
    clang-analyzer-security.insecureAPI.bzero
    clang-analyzer-security.insecureAPI.decodeValueOfObjCType
    clang-analyzer-security.insecureAPI.getpw
    clang-analyzer-security.insecureAPI.gets
    clang-analyzer-security.insecureAPI.mkstemp
    clang-analyzer-security.insecureAPI.mktemp
    clang-analyzer-security.insecureAPI.rand
    clang-analyzer-security.insecureAPI.strcpy
    clang-analyzer-security.insecureAPI.vfork
    clang-analyzer-unix.API
    clang-analyzer-unix.DynamicMemoryModeling
    clang-analyzer-unix.Malloc
    clang-analyzer-unix.MallocSizeof
    clang-analyzer-unix.MismatchedDeallocator
    clang-analyzer-unix.Vfork
    clang-analyzer-unix.cstring.BadSizeArg
    clang-analyzer-unix.cstring.CStringModeling
    clang-analyzer-unix.cstring.NullArg
    clang-analyzer-valist.CopyToSelf
    clang-analyzer-valist.Uninitialized
    clang-analyzer-valist.Unterminated
    clang-analyzer-valist.ValistBase
    misc-unused-alias-decls
    misc-unused-parameters
    misc-unused-using-decls
    modernize-avoid-bind
    modernize-avoid-c-arrays
    modernize-concat-nested-namespaces
    modernize-deprecated-headers
    modernize-deprecated-ios-base-aliases
    modernize-loop-convert
    modernize-make-shared
    modernize-make-unique
    modernize-pass-by-value
    modernize-raw-string-literal
    modernize-redundant-void-arg
    modernize-replace-auto-ptr
    modernize-replace-random-shuffle
    modernize-return-braced-init-list
    modernize-shrink-to-fit
    modernize-unary-static-assert
    modernize-use-auto
    modernize-use-bool-literals
    modernize-use-default-member-init
    modernize-use-emplace
    modernize-use-equals-default
    modernize-use-equals-delete
    modernize-use-nodiscard
    modernize-use-noexcept
    modernize-use-nullptr
    modernize-use-transparent-functors
    modernize-use-uncaught-exceptions
    modernize-use-using

clang-apply-replacements version 10.0.0
clang-tidy -export-fixes /tmp/tmpata1hy0n/tmpswam1_oe.yaml -p=/home/sabbir/sst-elements-org/CramSim/build /home/sabbir/sst-elements-org/CramSim/c_Bank.cpp
/home/sabbir/sst-elements-org/CramSim/c_Bank.cpp:50:29: warning: unused parameter 'x_params' [clang-diagnostic-unused-parameter]
c_Bank::c_Bank(SST::Params& x_params,unsigned x_bankId) {
                            ^
/home/sabbir/sst-elements-org/CramSim/c_Bank.cpp:52:7: warning: unused variable 'l_found' [clang-diagnostic-unused-variable]
        bool l_found = false;
             ^
clang-tidy -export-fixes /tmp/tmpata1hy0n/tmpg9sv3mhv.yaml -p=/home/sabbir/sst-elements-org/CramSim/build /home/sabbir/sst-elements-org/CramSim/c_TraceFileReader.cpp
/home/sabbir/sst-elements-org/CramSim/c_TraceFileReader.cpp:97:22: warning: Value stored to 'l_numTokens' during its initialization is never read [clang-analyzer-deadcode.DeadStores]
            unsigned l_numTokens = std::distance(l_tok.begin(), l_tok.end());
                     ^
/home/sabbir/sst-elements-org/CramSim/c_TraceFileReader.cpp:97:22: note: Value stored to 'l_numTokens' during its initialization is never read
/home/sabbir/sst-elements-org/CramSim/c_TraceFileReader.cpp:97:22: warning: unused variable 'l_numTokens' [clang-diagnostic-unused-variable]
            unsigned l_numTokens = std::distance(l_tok.begin(), l_tok.end());
                     ^
/home/sabbir/sst-elements-org/CramSim/c_TraceFileReader.cpp:102:22: warning: unused variable 'l_txnDataWidth' [clang-diagnostic-unused-variable]
            unsigned l_txnDataWidth = 0;
                     ^
/home/sabbir/sst-elements-org/CramSim/c_TraceFileReader.cpp:164:40: warning: 2nd function call argument is an uninitialized value [clang-analyzer-core.CallAndMessage]
            c_Transaction* l_txn = new c_Transaction(m_seqNum, l_txnType, l_txnAddress, 1);
                                       ^
/home/sabbir/sst-elements-org/CramSim/c_TraceFileReader.cpp:91:11: note: Assuming the condition is true
    while(m_txnReqQ.size()<k_numTxnPerCycle)
          ^
/home/sabbir/sst-elements-org/CramSim/c_TraceFileReader.cpp:91:5: note: Loop condition is true.  Entering loop body
    while(m_txnReqQ.size()<k_numTxnPerCycle)
    ^
/home/sabbir/sst-elements-org/CramSim/c_TraceFileReader.cpp:94:13: note: Calling 'basic_ios::operator bool'
        if (std::getline(*m_traceFileStream, l_line)) {
            ^
/usr/lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/bits/basic_ios.h:118:17: note: Calling 'basic_ios::fail'
      { return !this->fail(); }
                ^
/usr/lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/bits/basic_ios.h:202:16: note: Assuming the condition is false
      { return (this->rdstate() & (badbit | failbit)) != 0; }
               ^
/usr/lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/bits/basic_ios.h:202:9: note: Returning zero, which participates in a condition later
      { return (this->rdstate() & (badbit | failbit)) != 0; }
        ^
/usr/lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/bits/basic_ios.h:118:17: note: Returning from 'basic_ios::fail'
      { return !this->fail(); }
                ^
/usr/lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/bits/basic_ios.h:118:9: note: Returning the value 1, which participates in a condition later
      { return !this->fail(); }
        ^
/home/sabbir/sst-elements-org/CramSim/c_TraceFileReader.cpp:94:13: note: Returning from 'basic_ios::operator bool'
        if (std::getline(*m_traceFileStream, l_line)) {
            ^
/home/sabbir/sst-elements-org/CramSim/c_TraceFileReader.cpp:94:9: note: Taking true branch
        if (std::getline(*m_traceFileStream, l_line)) {
        ^
/home/sabbir/sst-elements-org/CramSim/c_TraceFileReader.cpp:100:13: note: 'l_txnType' declared without an initial value
            e_TransactionType l_txnType;
            ^
/home/sabbir/sst-elements-org/CramSim/c_TraceFileReader.cpp:104:13: note: Loop condition is false. Execution continues on line 164
            for (Tokenizer<>::iterator l_iter =
            ^
/home/sabbir/sst-elements-org/CramSim/c_TraceFileReader.cpp:164:40: note: 2nd function call argument is an uninitialized value
            c_Transaction* l_txn = new c_Transaction(m_seqNum, l_txnType, l_txnAddress, 1);
                                       ^
clang-tidy -export-fixes /tmp/tmpata1hy0n/tmpy_v2t39w.yaml -p=/home/sabbir/sst-elements-org/CramSim/build /home/sabbir/sst-elements-org/CramSim/CramSim.cpp
clang-tidy -export-fixes /tmp/tmpata1hy0n/tmpo1cezkyo.yaml -p=/home/sabbir/sst-elements-org/CramSim/build /home/sabbir/sst-elements-org/CramSim/c_Transaction.cpp
/home/sabbir/sst-elements-org/CramSim/c_Transaction.cpp:127:7: warning: format specifies type 'long long' but the argument has type 'SST::SimTime_t' (aka 'unsigned long') [clang-diagnostic-format]
                                  x_cycle,
                                  ^
/home/sabbir/sst-elements-org/CramSim/c_Transaction.cpp:129:6: warning: format specifies type 'unsigned long long' but the argument has type 'uint64_t' (aka 'unsigned long') [clang-diagnostic-format]
                                        m_seqNum,
                                        ^
clang-tidy -export-fixes /tmp/tmpata1hy0n/tmp5_tyj0d_.yaml -p=/home/sabbir/sst-elements-org/CramSim/build /home/sabbir/sst-elements-org/CramSim/c_HashedAddress.cpp
clang-tidy -export-fixes /tmp/tmpata1hy0n/tmpw5u3obra.yaml -p=/home/sabbir/sst-elements-org/CramSim/build /home/sabbir/sst-elements-org/CramSim/c_TxnConverter.cpp
/home/sabbir/sst-elements-org/CramSim/c_TxnConverter.cpp:44:154: warning: field 'output' will be initialized after field 'm_cmdScheduler' [clang-diagnostic-reorder-ctor]
c_TxnConverter::c_TxnConverter(SST::ComponentId_t id, SST::Params& x_params, Output* out, unsigned banks, c_CmdScheduler* scheduler) : SubComponent(id), output(out), m_cmdScheduler(scheduler) {
                                                                                                                                                         ^
/home/sabbir/sst-elements-org/CramSim/c_TxnConverter.cpp:195:26: warning: unused variable 'l_hashedAddr' [clang-diagnostic-unused-variable]
                const c_HashedAddress &l_hashedAddr=x_txn->getHashedAddress();
                                       ^
clang-tidy -export-fixes /tmp/tmpata1hy0n/tmpipbwt8o4.yaml -p=/home/sabbir/sst-elements-org/CramSim/build /home/sabbir/sst-elements-org/CramSim/c_AddressHasher.cpp
/home/sabbir/sst-elements-org/CramSim/c_AddressHasher.cpp:47:95: warning: field 'output' will be initialized after field 'k_pNumChannels' [clang-diagnostic-reorder-ctor]
        unsigned banks, unsigned rows, unsigned cols, unsigned pChannels) : SubComponent(id), output(out), k_pNumChannels(channels),
                                                                                              ^
/home/sabbir/sst-elements-org/CramSim/c_AddressHasher.cpp:76:24: warning: comparison of integers of different signs: 'int' and 'unsigned int' [clang-diagnostic-sign-compare]
      for(int ii=0; ii < l_parsedData.second; ii++) {
                       ^
/home/sabbir/sst-elements-org/CramSim/c_AddressHasher.cpp:117:26: warning: comparison of integers of different signs: 'int' and 'std::map<std::__cxx11::basic_string<char>, unsigned int, std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, unsigned int> > >::mapped_type' (aka 'unsigned int') [clang-diagnostic-sign-compare]
      for(int ii = 0; ii < l_cfgBits[l_iter]; ii++) {
                         ^
/home/sabbir/sst-elements-org/CramSim/c_AddressHasher.cpp:138:23: warning: comparison of integers of different signs: 'int' and 'unsigned int' [clang-diagnostic-sign-compare]
    if(l_aNumChannels > k_pNumChannels) {
                      ^
/home/sabbir/sst-elements-org/CramSim/c_AddressHasher.cpp:141:23: warning: comparison of integers of different signs: 'int' and 'unsigned int' [clang-diagnostic-sign-compare]
    if(l_aNumChannels < k_pNumChannels) { // some addresses have nowhere to go
                      ^
/home/sabbir/sst-elements-org/CramSim/c_AddressHasher.cpp:156:24: warning: comparison of integers of different signs: 'int' and 'unsigned int' [clang-diagnostic-sign-compare]
    if(l_aNumPChannels > k_pNumPseudoChannels) {
                       ^
/home/sabbir/sst-elements-org/CramSim/c_AddressHasher.cpp:160:24: warning: comparison of integers of different signs: 'int' and 'unsigned int' [clang-diagnostic-sign-compare]
    if(l_aNumPChannels < k_pNumPseudoChannels) { // some addresses have nowhere to go
                       ^
/home/sabbir/sst-elements-org/CramSim/c_AddressHasher.cpp:174:20: warning: comparison of integers of different signs: 'int' and 'unsigned int' [clang-diagnostic-sign-compare]
    if(l_aNumRanks > k_pNumRanks) {
                   ^
/home/sabbir/sst-elements-org/CramSim/c_AddressHasher.cpp:178:20: warning: comparison of integers of different signs: 'int' and 'unsigned int' [clang-diagnostic-sign-compare]
    if(l_aNumRanks < k_pNumRanks) { // some addresses have nowhere to go
                   ^
/home/sabbir/sst-elements-org/CramSim/c_AddressHasher.cpp:192:25: warning: comparison of integers of different signs: 'int' and 'unsigned int' [clang-diagnostic-sign-compare]
    if(l_aNumBankGroups > k_pNumBankGroups) {
                        ^
/home/sabbir/sst-elements-org/CramSim/c_AddressHasher.cpp:196:25: warning: comparison of integers of different signs: 'int' and 'unsigned int' [clang-diagnostic-sign-compare]
    if(l_aNumBankGroups < k_pNumBankGroups) { // some addresses have nowhere to go
                        ^
/home/sabbir/sst-elements-org/CramSim/c_AddressHasher.cpp:210:20: warning: comparison of integers of different signs: 'int' and 'unsigned int' [clang-diagnostic-sign-compare]
    if(l_aNumBanks > k_pNumBanks) {
                   ^
/home/sabbir/sst-elements-org/CramSim/c_AddressHasher.cpp:214:20: warning: comparison of integers of different signs: 'int' and 'unsigned int' [clang-diagnostic-sign-compare]
    if(l_aNumBanks < k_pNumBanks) { // some addresses have nowhere to go
                   ^
/home/sabbir/sst-elements-org/CramSim/c_AddressHasher.cpp:228:19: warning: comparison of integers of different signs: 'int' and 'unsigned int' [clang-diagnostic-sign-compare]
    if(l_aNumRows > k_pNumRows) {
                  ^
/home/sabbir/sst-elements-org/CramSim/c_AddressHasher.cpp:232:19: warning: comparison of integers of different signs: 'int' and 'unsigned int' [clang-diagnostic-sign-compare]
    if(l_aNumRows < k_pNumRows) { // some addresses have nowhere to go
                  ^
/home/sabbir/sst-elements-org/CramSim/c_AddressHasher.cpp:246:19: warning: comparison of integers of different signs: 'int' and 'unsigned int' [clang-diagnostic-sign-compare]
    if(l_aNumCols > k_pNumCols) {
                  ^
/home/sabbir/sst-elements-org/CramSim/c_AddressHasher.cpp:250:19: warning: comparison of integers of different signs: 'int' and 'unsigned int' [clang-diagnostic-sign-compare]
    if(l_aNumCols < k_pNumCols) { // some addresses have nowhere to go
                  ^
/home/sabbir/sst-elements-org/CramSim/c_AddressHasher.cpp:264:25: warning: comparison of integers of different signs: 'int' and 'unsigned int' [clang-diagnostic-sign-compare]
    if(l_aNumCachelines != k_pBurstSize) {
                        ^
clang-tidy -export-fixes /tmp/tmpata1hy0n/tmptyn3q2v_.yaml -p=/home/sabbir/sst-elements-org/CramSim/build /home/sabbir/sst-elements-org/CramSim/c_Dimm.cpp
/home/sabbir/sst-elements-org/CramSim/c_Dimm.cpp:123:7: warning: Value stored to 'l_numRank' during its initialization is never read [clang-analyzer-deadcode.DeadStores]
                int l_numRank=k_numRanksPerChannel*k_numChannels*k_numPChannelsPerChannel;
                    ^
/home/sabbir/sst-elements-org/CramSim/c_Dimm.cpp:123:7: note: Value stored to 'l_numRank' during its initialization is never read
/home/sabbir/sst-elements-org/CramSim/c_Dimm.cpp:123:7: warning: unused variable 'l_numRank' [clang-diagnostic-unused-variable]
                int l_numRank=k_numRanksPerChannel*k_numChannels*k_numPChannelsPerChannel;
                    ^
/home/sabbir/sst-elements-org/CramSim/c_Dimm.cpp:268:28: warning: comparison of integers of different signs: 'unsigned int' and 'int' [clang-diagnostic-sign-compare]
        for(unsigned i=0; i<m_numRanks;i++)
                           ^
/home/sabbir/sst-elements-org/CramSim/c_Dimm.cpp:299:24: warning: comparison of integers of different signs: 'int' and 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-compare]
        for (int l_i = 0; l_i != m_banks.size(); ++l_i) {
                              ^
/home/sabbir/sst-elements-org/CramSim/c_Dimm.cpp:322:16: warning: comparison of integers of different signs: 'unsigned int' and 'int' [clang-diagnostic-sign-compare]
                assert(l_rank<m_numRanks);
                             ^
/usr/include/assert.h:93:27: note: expanded from macro 'assert'
     (static_cast <bool> (expr)                                         \
                          ^
/home/sabbir/sst-elements-org/CramSim/c_Dimm.cpp:363:4: warning: Use of memory after it is freed [clang-analyzer-cplusplus.NewDelete]
                        updateDynamicEnergy(l_cmdReq);
                        ^
/home/sabbir/sst-elements-org/CramSim/c_Dimm.cpp:318:6: note: Assuming 'l_cmdReqEventPtr' is non-null
        if (l_cmdReqEventPtr) {
            ^
/home/sabbir/sst-elements-org/CramSim/c_Dimm.cpp:318:2: note: Taking true branch
        if (l_cmdReqEventPtr) {
        ^
/home/sabbir/sst-elements-org/CramSim/c_Dimm.cpp:322:10: note: Assuming 'l_rank' is < field 'm_numRanks'
                assert(l_rank<m_numRanks);
                       ^
/usr/include/assert.h:93:27: note: expanded from macro 'assert'
     (static_cast <bool> (expr)                                         \
                          ^
/home/sabbir/sst-elements-org/CramSim/c_Dimm.cpp:322:3: note: '?' condition is true
                assert(l_rank<m_numRanks);
                ^
/usr/include/assert.h:93:7: note: expanded from macro 'assert'
     (static_cast <bool> (expr)                                         \
      ^
/home/sabbir/sst-elements-org/CramSim/c_Dimm.cpp:324:3: note: Control jumps to 'case PDE:'  at line 356
                switch(l_cmdReq->getCommandMnemonic()) {
                ^
/home/sabbir/sst-elements-org/CramSim/c_Dimm.cpp:357:5: note:  Execution continues on line 360
                  break;
                  ^
/home/sabbir/sst-elements-org/CramSim/c_Dimm.cpp:360:3: note: Calling 'c_Dimm::sendToBank'
                sendToBank(l_cmdReq);
                ^
/home/sabbir/sst-elements-org/CramSim/c_Dimm.cpp:419:6: note: Assuming the condition is true
        if (x_bankCommandPtr->getBankIdVec().size() > 0) {
            ^
/home/sabbir/sst-elements-org/CramSim/c_Dimm.cpp:419:2: note: Taking true branch
        if (x_bankCommandPtr->getBankIdVec().size() > 0) {
        ^
/home/sabbir/sst-elements-org/CramSim/c_Dimm.cpp:426:3: note: Memory is released
                delete x_bankCommandPtr;
                ^
/home/sabbir/sst-elements-org/CramSim/c_Dimm.cpp:360:3: note: Returning; memory was released via 1st parameter
                sendToBank(l_cmdReq);
                ^
/home/sabbir/sst-elements-org/CramSim/c_Dimm.cpp:362:6: note: Assuming field 'k_boolPowerCalc' is true
                if(k_boolPowerCalc)
                   ^
/home/sabbir/sst-elements-org/CramSim/c_Dimm.cpp:362:3: note: Taking true branch
                if(k_boolPowerCalc)
                ^
/home/sabbir/sst-elements-org/CramSim/c_Dimm.cpp:363:4: note: Use of memory after it is freed
                        updateDynamicEnergy(l_cmdReq);
                        ^
/home/sabbir/sst-elements-org/CramSim/c_Dimm.cpp:412:20: warning: comparison of integers of different signs: 'unsigned int' and 'int' [clang-diagnostic-sign-compare]
        for(unsigned i=0;i<m_numRanks;i++)
                          ^
/home/sabbir/sst-elements-org/CramSim/c_Dimm.cpp:468:21: warning: comparison of integers of different signs: 'unsigned int' and 'int' [clang-diagnostic-sign-compare]
        for(unsigned i=0; i<m_numRanks;i++)
                           ^
/home/sabbir/sst-elements-org/CramSim/c_Dimm.cpp:503:27: warning: comparison of integers of different signs: 'unsigned int' and 'int' [clang-diagnostic-sign-compare]
        for(unsigned i=0;i<m_numRanks;i++) {
                          ^
clang-tidy -export-fixes /tmp/tmpata1hy0n/tmpzxgf85er.yaml -p=/home/sabbir/sst-elements-org/CramSim/build /home/sabbir/sst-elements-org/CramSim/c_DeviceDriver.cpp
/home/sabbir/sst-elements-org/CramSim/c_DeviceDriver.cpp:68:145: warning: field 'output' will be initialized after field 'm_sendCmdFunc' [clang-diagnostic-reorder-ctor]
c_DeviceDriver::c_DeviceDriver(ComponentId_t id, Params& params, Output* out, std::function<void(c_BankCommand*)> sendFunc) : SubComponent(id), output(out), m_sendCmdFunc(sendFunc) {
                                                                                                                                                ^
/home/sabbir/sst-elements-org/CramSim/c_DeviceDriver.cpp:301:29: warning: comparison of integers of different signs: 'unsigned int' and 'int' [clang-diagnostic-sign-compare]
        for (unsigned l_i = 0; l_i != m_numPseudoChannels; ++l_i) {
                                   ^
/home/sabbir/sst-elements-org/CramSim/c_DeviceDriver.cpp:305:30: warning: comparison of integers of different signs: 'unsigned int' and 'int' [clang-diagnostic-sign-compare]
                for (unsigned l_j = 0; l_j != k_numRanksPerChannel; ++l_j) {
                                           ^
/home/sabbir/sst-elements-org/CramSim/c_DeviceDriver.cpp:312:19: warning: comparison of integers of different signs: 'unsigned int' and 'int' [clang-diagnostic-sign-compare]
        assert(l_rankNum == m_numRanks);
                         ^
/usr/include/assert.h:93:27: note: expanded from macro 'assert'
     (static_cast <bool> (expr)                                         \
                          ^
/home/sabbir/sst-elements-org/CramSim/c_DeviceDriver.cpp:315:29: warning: comparison of integers of different signs: 'unsigned int' and 'int' [clang-diagnostic-sign-compare]
        for (unsigned l_i = 0; l_i != m_numRanks; ++l_i) {
                                   ^
/home/sabbir/sst-elements-org/CramSim/c_DeviceDriver.cpp:316:30: warning: comparison of integers of different signs: 'unsigned int' and 'int' [clang-diagnostic-sign-compare]
                for (unsigned l_j = 0; l_j != k_numBankGroupsPerRank; ++l_j) {
                                           ^
/home/sabbir/sst-elements-org/CramSim/c_DeviceDriver.cpp:324:24: warning: comparison of integers of different signs: 'unsigned int' and 'int' [clang-diagnostic-sign-compare]
        assert(l_bankGroupNum == m_numBankGroups);
                              ^
/usr/include/assert.h:93:27: note: expanded from macro 'assert'
     (static_cast <bool> (expr)                                         \
                          ^
/home/sabbir/sst-elements-org/CramSim/c_DeviceDriver.cpp:336:19: warning: comparison of integers of different signs: 'unsigned int' and 'int' [clang-diagnostic-sign-compare]
        assert(l_bankNum == m_numBanks);
                         ^
/usr/include/assert.h:93:27: note: expanded from macro 'assert'
     (static_cast <bool> (expr)                                         \
                          ^
/home/sabbir/sst-elements-org/CramSim/c_DeviceDriver.cpp:403:11: warning: Value stored to 'l_issued_cmd' during its initialization is never read [clang-analyzer-deadcode.DeadStores]
        uint64_t l_issued_cmd=m_issued_cmd;
                 ^
/home/sabbir/sst-elements-org/CramSim/c_DeviceDriver.cpp:403:11: note: Value stored to 'l_issued_cmd' during its initialization is never read
/home/sabbir/sst-elements-org/CramSim/c_DeviceDriver.cpp:403:11: warning: unused variable 'l_issued_cmd' [clang-diagnostic-unused-variable]
        uint64_t l_issued_cmd=m_issued_cmd;
                 ^
/home/sabbir/sst-elements-org/CramSim/c_DeviceDriver.cpp:409:32: warning: comparison of integers of different signs: 'unsigned int' and 'int' [clang-diagnostic-sign-compare]
                for (unsigned l_id = 0; l_id < m_numRanks; l_id++) {
                                             ^
/home/sabbir/sst-elements-org/CramSim/c_DeviceDriver.cpp:460:24: warning: comparison of integers of different signs: 'int' and 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-compare]
        for (int l_i = 0; l_i != m_banks.size(); ++l_i) {
                              ^
/home/sabbir/sst-elements-org/CramSim/c_DeviceDriver.cpp:918:17: warning: comparison of integers of different signs: 'unsigned int' and 'int' [clang-diagnostic-sign-compare]
        assert(x_rankid<m_numRanks);
                       ^
/usr/include/assert.h:93:27: note: expanded from macro 'assert'
     (static_cast <bool> (expr)                                         \
                          ^
/home/sabbir/sst-elements-org/CramSim/c_DeviceDriver.cpp:934:11: warning: Value stored to 'l_ch' during its initialization is never read [clang-analyzer-deadcode.DeadStores]
        unsigned l_ch = x_cmd->getHashedAddress()->getChannel();
                 ^
/home/sabbir/sst-elements-org/CramSim/c_DeviceDriver.cpp:934:11: note: Value stored to 'l_ch' during its initialization is never read
/home/sabbir/sst-elements-org/CramSim/c_DeviceDriver.cpp:934:11: warning: unused variable 'l_ch' [clang-diagnostic-unused-variable]
        unsigned l_ch = x_cmd->getHashedAddress()->getChannel();
                 ^
/home/sabbir/sst-elements-org/CramSim/c_DeviceDriver.cpp:981:2: warning: Potential leak of memory pointed to by 'l_hashedAddress' [clang-analyzer-cplusplus.NewDeleteLeaks]
        m_refreshCmdQ[x_rankID].clear();
        ^
/home/sabbir/sst-elements-org/CramSim/c_DeviceDriver.cpp:406:5: note: Assuming field 'k_useRefresh' is true
        if(k_useRefresh) {
           ^
/home/sabbir/sst-elements-org/CramSim/c_DeviceDriver.cpp:406:2: note: Taking true branch
        if(k_useRefresh) {
        ^
/home/sabbir/sst-elements-org/CramSim/c_DeviceDriver.cpp:409:27: note: Assuming 'l_id' is < field 'm_numRanks'
                for (unsigned l_id = 0; l_id < m_numRanks; l_id++) {
                                        ^
/home/sabbir/sst-elements-org/CramSim/c_DeviceDriver.cpp:409:3: note: Loop condition is true.  Entering loop body
                for (unsigned l_id = 0; l_id < m_numRanks; l_id++) {
                ^
/home/sabbir/sst-elements-org/CramSim/c_DeviceDriver.cpp:410:8: note: Assuming the condition is false
                        if (m_currentREFICount[l_id] > 0) {
                            ^
/home/sabbir/sst-elements-org/CramSim/c_DeviceDriver.cpp:410:4: note: Taking false branch
                        if (m_currentREFICount[l_id] > 0) {
                        ^
/home/sabbir/sst-elements-org/CramSim/c_DeviceDriver.cpp:413:5: note: Calling 'c_DeviceDriver::createRefreshCmds'
                                createRefreshCmds(l_id);
                                ^
/home/sabbir/sst-elements-org/CramSim/c_DeviceDriver.cpp:955:5: note: Assuming field 'k_useSBRefresh' is false
        if(k_useSBRefresh) // per-bank refresh (single bank refresh)
           ^
/home/sabbir/sst-elements-org/CramSim/c_DeviceDriver.cpp:955:2: note: Taking false branch
        if(k_useSBRefresh) // per-bank refresh (single bank refresh)
        ^
/home/sabbir/sst-elements-org/CramSim/c_DeviceDriver.cpp:973:8: note: Assuming field 'm_numPseudoChannels' is <= 1
    if(m_numPseudoChannels>1)
       ^
/home/sabbir/sst-elements-org/CramSim/c_DeviceDriver.cpp:973:5: note: Taking false branch
    if(m_numPseudoChannels>1)
    ^
/home/sabbir/sst-elements-org/CramSim/c_DeviceDriver.cpp:978:37: note: Memory is allocated
        c_HashedAddress *l_hashedAddress = new c_HashedAddress(l_ch, l_pch, 0, 0, 0, 0, 0, 0);
                                           ^
/home/sabbir/sst-elements-org/CramSim/c_DeviceDriver.cpp:981:2: note: Potential leak of memory pointed to by 'l_hashedAddress'
        m_refreshCmdQ[x_rankID].clear();
        ^
clang-tidy -export-fixes /tmp/tmpata1hy0n/tmp0t_koeug.yaml -p=/home/sabbir/sst-elements-org/CramSim/build /home/sabbir/sst-elements-org/CramSim/c_BankStateActivating.cpp
/home/sabbir/sst-elements-org/CramSim/c_BankStateActivating.cpp:61:55: warning: unused parameter 'x_bank' [clang-diagnostic-unused-parameter]
void c_BankStateActivating::handleCommand(c_BankInfo* x_bank, c_BankCommand* x_bankCommandPtr, SimTime_t x_cycle) {
                                                      ^
/home/sabbir/sst-elements-org/CramSim/c_BankStateActivating.cpp:61:78: warning: unused parameter 'x_bankCommandPtr' [clang-diagnostic-unused-parameter]
void c_BankStateActivating::handleCommand(c_BankInfo* x_bank, c_BankCommand* x_bankCommandPtr, SimTime_t x_cycle) {
                                                                             ^
/home/sabbir/sst-elements-org/CramSim/c_BankStateActivating.cpp:61:106: warning: unused parameter 'x_cycle' [clang-diagnostic-unused-parameter]
void c_BankStateActivating::handleCommand(c_BankInfo* x_bank, c_BankCommand* x_bankCommandPtr, SimTime_t x_cycle) {
                                                                                                         ^
/home/sabbir/sst-elements-org/CramSim/c_BankStateActivating.cpp:80:64: warning: unused parameter 'x_cycle' [clang-diagnostic-unused-parameter]
                c_BankState* x_prevState, c_BankCommand* x_cmdPtr, SimTime_t x_cycle) {
                                                                             ^
/home/sabbir/sst-elements-org/CramSim/c_BankStateActivating.cpp:108:15: warning: unused parameter 'x_bankPtr' [clang-diagnostic-unused-parameter]
                c_BankInfo* x_bankPtr) {
                            ^
clang-tidy -export-fixes /tmp/tmpata1hy0n/tmp8es3y56q.yaml -p=/home/sabbir/sst-elements-org/CramSim/build /home/sabbir/sst-elements-org/CramSim/c_BankCommand.cpp
/home/sabbir/sst-elements-org/CramSim/c_BankCommand.cpp:43:29: warning: field 'm_hashedAddr' will be initialized after field 'm_bankId' [clang-diagnostic-reorder-ctor]
                m_isResponseReady(false), m_hashedAddr(x_hashedAddr), m_bankId(x_hashedAddr.getBankId()), m_isRefreshType(false) {
                                          ^
/home/sabbir/sst-elements-org/CramSim/c_BankCommand.cpp:60:3: warning: field 'm_isResponseReady' will be initialized after field 'm_bankId' [clang-diagnostic-reorder-ctor]
                m_isResponseReady(false), m_bankId(x_bankId), m_isRefreshType(true) {
                ^
/home/sabbir/sst-elements-org/CramSim/c_BankCommand.cpp:79:3: warning: field 'm_isResponseReady' will be initialized after field 'm_bankIdVec' [clang-diagnostic-reorder-ctor]
                m_isResponseReady(false), m_bankIdVec(x_bankIdVec), m_isRefreshType(true) {
                ^
/home/sabbir/sst-elements-org/CramSim/c_BankCommand.cpp:130:72: warning: format specifies type 'unsigned long long' but the argument has type 'SST::SimTime_t' (aka 'unsigned long') [clang-diagnostic-format]
        x_debugOutput->verbose(CALL_INFO, 1, 0, "[BankCommand] Cycle:%llu," , x_cycle);
                                                                     ~~~~     ^
                                                                     %lu
/home/sabbir/sst-elements-org/CramSim/c_BankCommand.cpp:149:8: warning: format specifies type 'long long' but the argument has type 'SST::SimTime_t' (aka 'unsigned long') [clang-diagnostic-format]
                                                        x_cycle,
                                                        ^
/home/sabbir/sst-elements-org/CramSim/c_BankCommand.cpp:151:8: warning: format specifies type 'unsigned long long' but the argument has type 'uint64_t' (aka 'unsigned long') [clang-diagnostic-format]
                                                        m_seqNum,
                                                        ^
clang-tidy -export-fixes /tmp/tmpata1hy0n/tmpc56s1vvm.yaml -p=/home/sabbir/sst-elements-org/CramSim/build /home/sabbir/sst-elements-org/CramSim/c_BankStateActive.cpp
/home/sabbir/sst-elements-org/CramSim/c_BankStateActive.cpp:191:15: warning: unused parameter 'x_bankPtr' [clang-diagnostic-unused-parameter]
                c_BankInfo* x_bankPtr) {
                            ^
clang-tidy -export-fixes /tmp/tmpata1hy0n/tmpfx9_a5n1.yaml -p=/home/sabbir/sst-elements-org/CramSim/build /home/sabbir/sst-elements-org/CramSim/c_BankStateIdle.cpp
/home/sabbir/sst-elements-org/CramSim/c_BankStateIdle.cpp:122:5: warning: Called C++ object pointer is null [clang-analyzer-core.CallAndMessage]
                                l_p->enter(x_bank, this, m_receivedCommandPtr,l_time);
                                ^
/home/sabbir/sst-elements-org/CramSim/c_BankStateIdle.cpp:94:13: note: Assuming 2 is >= field 'm_timer'
        if (2 < m_timer) {
            ^
/home/sabbir/sst-elements-org/CramSim/c_BankStateIdle.cpp:94:9: note: Taking false branch
        if (2 < m_timer) {
        ^
/home/sabbir/sst-elements-org/CramSim/c_BankStateIdle.cpp:98:7: note: Assuming 1 is not equal to field 'm_timer'
                if (1 == m_timer) {
                    ^
/home/sabbir/sst-elements-org/CramSim/c_BankStateIdle.cpp:98:3: note: Taking false branch
                if (1 == m_timer) {
                ^
/home/sabbir/sst-elements-org/CramSim/c_BankStateIdle.cpp:104:8: note: Assuming field 'm_receivedCommandPtr' is non-null
                        if (m_receivedCommandPtr) {
                            ^
/home/sabbir/sst-elements-org/CramSim/c_BankStateIdle.cpp:104:4: note: Taking true branch
                        if (m_receivedCommandPtr) {
                        ^
/home/sabbir/sst-elements-org/CramSim/c_BankStateIdle.cpp:105:5: note: 'l_p' initialized to a null pointer value
                                c_BankState* l_p = nullptr;
                                ^
/home/sabbir/sst-elements-org/CramSim/c_BankStateIdle.cpp:106:5: note: Control jumps to the 'default' case at line 116
                                switch (m_receivedCommandPtr->getCommandMnemonic()) {
                                ^
/home/sabbir/sst-elements-org/CramSim/c_BankStateIdle.cpp:117:5: note:  Execution continues on line 120
                                break;
                                ^
/home/sabbir/sst-elements-org/CramSim/c_BankStateIdle.cpp:120:5: note: '?' condition is true
                                assert(nullptr != m_receivedCommandPtr);
                                ^
/usr/include/assert.h:93:7: note: expanded from macro 'assert'
     (static_cast <bool> (expr)                                         \
      ^
/home/sabbir/sst-elements-org/CramSim/c_BankStateIdle.cpp:122:5: note: Called C++ object pointer is null
                                l_p->enter(x_bank, this, m_receivedCommandPtr,l_time);
                                ^
/home/sabbir/sst-elements-org/CramSim/c_BankStateIdle.cpp:164:15: warning: unused parameter 'x_bankPtr' [clang-diagnostic-unused-parameter]
                c_BankInfo* x_bankPtr) {
                            ^
clang-tidy -export-fixes /tmp/tmpata1hy0n/tmpplit1j6w.yaml -p=/home/sabbir/sst-elements-org/CramSim/build /home/sabbir/sst-elements-org/CramSim/c_BankStatePrecharge.cpp
/home/sabbir/sst-elements-org/CramSim/c_BankStatePrecharge.cpp:62:54: warning: unused parameter 'x_bank' [clang-diagnostic-unused-parameter]
void c_BankStatePrecharge::handleCommand(c_BankInfo* x_bank,
                                                     ^
/home/sabbir/sst-elements-org/CramSim/c_BankStatePrecharge.cpp:63:18: warning: unused parameter 'x_bankCommandPtr' [clang-diagnostic-unused-parameter]
                c_BankCommand* x_bankCommandPtr, SimTime_t x_cycle) {
                               ^
/home/sabbir/sst-elements-org/CramSim/c_BankStatePrecharge.cpp:63:46: warning: unused parameter 'x_cycle' [clang-diagnostic-unused-parameter]
                c_BankCommand* x_bankCommandPtr, SimTime_t x_cycle) {
                                                           ^
/home/sabbir/sst-elements-org/CramSim/c_BankStatePrecharge.cpp:83:37: warning: unused parameter 'x_cycle' [clang-diagnostic-unused-parameter]
                c_BankCommand* x_cmdPtr,SimTime_t x_cycle) {
                                                  ^
/home/sabbir/sst-elements-org/CramSim/c_BankStatePrecharge.cpp:107:15: warning: unused parameter 'x_bankPtr' [clang-diagnostic-unused-parameter]
                c_BankInfo* x_bankPtr) {
                            ^
clang-tidy -export-fixes /tmp/tmpata1hy0n/tmppnulwl8q.yaml -p=/home/sabbir/sst-elements-org/CramSim/build /home/sabbir/sst-elements-org/CramSim/c_BankStateRead.cpp
/home/sabbir/sst-elements-org/CramSim/c_BankStateRead.cpp:205:12: warning: unused variable 'l_time' [clang-diagnostic-unused-variable]
        SimTime_t l_time = x_cycle;
                  ^
/home/sabbir/sst-elements-org/CramSim/c_BankStateRead.cpp:259:15: warning: unused parameter 'x_bankPtr' [clang-diagnostic-unused-parameter]
                c_BankInfo* x_bankPtr) {
                            ^
clang-tidy -export-fixes /tmp/tmpata1hy0n/tmp8e6s4fm_.yaml -p=/home/sabbir/sst-elements-org/CramSim/build /home/sabbir/sst-elements-org/CramSim/c_BankStateReadA.cpp
/home/sabbir/sst-elements-org/CramSim/c_BankStateReadA.cpp:65:50: warning: unused parameter 'x_bank' [clang-diagnostic-unused-parameter]
void c_BankStateReadA::handleCommand(c_BankInfo* x_bank,
                                                 ^
/home/sabbir/sst-elements-org/CramSim/c_BankStateReadA.cpp:66:18: warning: unused parameter 'x_bankCommandPtr' [clang-diagnostic-unused-parameter]
                c_BankCommand* x_bankCommandPtr, SimTime_t x_cycle) {
                               ^
/home/sabbir/sst-elements-org/CramSim/c_BankStateReadA.cpp:66:46: warning: unused parameter 'x_cycle' [clang-diagnostic-unused-parameter]
                c_BankCommand* x_bankCommandPtr, SimTime_t x_cycle) {
                                                           ^
/home/sabbir/sst-elements-org/CramSim/c_BankStateReadA.cpp:178:56: warning: unused parameter 'x_cmdPtr' [clang-diagnostic-unused-parameter]
bool c_BankStateReadA::isCommandAllowed(c_BankCommand* x_cmdPtr,
                                                       ^
/home/sabbir/sst-elements-org/CramSim/c_BankStateReadA.cpp:179:15: warning: unused parameter 'x_bankPtr' [clang-diagnostic-unused-parameter]
                c_BankInfo* x_bankPtr) {
                            ^
clang-tidy -export-fixes /tmp/tmpata1hy0n/tmp12gyre4f.yaml -p=/home/sabbir/sst-elements-org/CramSim/build /home/sabbir/sst-elements-org/CramSim/c_BankStateRefresh.cpp
/home/sabbir/sst-elements-org/CramSim/c_BankStateRefresh.cpp:61:52: warning: unused parameter 'x_bank' [clang-diagnostic-unused-parameter]
void c_BankStateRefresh::handleCommand(c_BankInfo* x_bank,
                                                   ^
/home/sabbir/sst-elements-org/CramSim/c_BankStateRefresh.cpp:62:18: warning: unused parameter 'x_bankCommandPtr' [clang-diagnostic-unused-parameter]
                c_BankCommand* x_bankCommandPtr, SimTime_t x_cycle) {
                               ^
/home/sabbir/sst-elements-org/CramSim/c_BankStateRefresh.cpp:62:46: warning: unused parameter 'x_cycle' [clang-diagnostic-unused-parameter]
                c_BankCommand* x_bankCommandPtr, SimTime_t x_cycle) {
                                                           ^
/home/sabbir/sst-elements-org/CramSim/c_BankStateRefresh.cpp:116:58: warning: unused parameter 'x_cmdPtr' [clang-diagnostic-unused-parameter]
bool c_BankStateRefresh::isCommandAllowed(c_BankCommand* x_cmdPtr,
                                                         ^
/home/sabbir/sst-elements-org/CramSim/c_BankStateRefresh.cpp:117:15: warning: unused parameter 'x_bankPtr' [clang-diagnostic-unused-parameter]
                c_BankInfo* x_bankPtr) {
                            ^
clang-tidy -export-fixes /tmp/tmpata1hy0n/tmpoz_3w7r0.yaml -p=/home/sabbir/sst-elements-org/CramSim/build /home/sabbir/sst-elements-org/CramSim/c_BankStateWrite.cpp
/home/sabbir/sst-elements-org/CramSim/c_BankStateWrite.cpp:216:12: warning: unused variable 'l_time' [clang-diagnostic-unused-variable]
        SimTime_t l_time = x_cycle;
                  ^
/home/sabbir/sst-elements-org/CramSim/c_BankStateWrite.cpp:274:15: warning: unused parameter 'x_bankPtr' [clang-diagnostic-unused-parameter]
                c_BankInfo* x_bankPtr) {
                            ^
clang-tidy -export-fixes /tmp/tmpata1hy0n/tmpj65kj77w.yaml -p=/home/sabbir/sst-elements-org/CramSim/build /home/sabbir/sst-elements-org/CramSim/c_BankStateWriteA.cpp
/home/sabbir/sst-elements-org/CramSim/c_BankStateWriteA.cpp:61:51: warning: unused parameter 'x_bank' [clang-diagnostic-unused-parameter]
void c_BankStateWriteA::handleCommand(c_BankInfo* x_bank,
                                                  ^
/home/sabbir/sst-elements-org/CramSim/c_BankStateWriteA.cpp:62:18: warning: unused parameter 'x_bankCommandPtr' [clang-diagnostic-unused-parameter]
                c_BankCommand* x_bankCommandPtr, SimTime_t x_cycle) {
                               ^
/home/sabbir/sst-elements-org/CramSim/c_BankStateWriteA.cpp:62:46: warning: unused parameter 'x_cycle' [clang-diagnostic-unused-parameter]
                c_BankCommand* x_bankCommandPtr, SimTime_t x_cycle) {
                                                           ^
/home/sabbir/sst-elements-org/CramSim/c_BankStateWriteA.cpp:171:57: warning: unused parameter 'x_cmdPtr' [clang-diagnostic-unused-parameter]
bool c_BankStateWriteA::isCommandAllowed(c_BankCommand* x_cmdPtr,
                                                        ^
/home/sabbir/sst-elements-org/CramSim/c_BankStateWriteA.cpp:172:15: warning: unused parameter 'x_bankPtr' [clang-diagnostic-unused-parameter]
                c_BankInfo* x_bankPtr) {
                            ^
clang-tidy -export-fixes /tmp/tmpata1hy0n/tmpttja2hn7.yaml -p=/home/sabbir/sst-elements-org/CramSim/build /home/sabbir/sst-elements-org/CramSim/c_Controller.cpp
/home/sabbir/sst-elements-org/CramSim/c_Controller.cpp:156:42: warning: unused parameter 'clock' [clang-diagnostic-unused-parameter]
bool c_Controller::clockTic(SST::Cycle_t clock) {
                                         ^
clang-tidy -export-fixes /tmp/tmpata1hy0n/tmp6ywto79p.yaml -p=/home/sabbir/sst-elements-org/CramSim/build /home/sabbir/sst-elements-org/CramSim/c_BankGroup.cpp
clang-tidy -export-fixes /tmp/tmpata1hy0n/tmpfc9wkzi8.yaml -p=/home/sabbir/sst-elements-org/CramSim/build /home/sabbir/sst-elements-org/CramSim/c_Channel.cpp
clang-tidy -export-fixes /tmp/tmpata1hy0n/tmpbo8_d45y.yaml -p=/home/sabbir/sst-elements-org/CramSim/build /home/sabbir/sst-elements-org/CramSim/c_Rank.cpp
clang-tidy -export-fixes /tmp/tmpata1hy0n/tmpou9miu55.yaml -p=/home/sabbir/sst-elements-org/CramSim/build /home/sabbir/sst-elements-org/CramSim/c_BankInfo.cpp
/home/sabbir/sst-elements-org/CramSim/c_BankInfo.cpp:53:3: warning: field 'm_bankParams' will be initialized after field 'm_bankId' [clang-diagnostic-reorder-ctor]
                m_bankParams(x_bankParams), m_bankId(x_bankId), m_bankState(
                ^
clang-tidy -export-fixes /tmp/tmpata1hy0n/tmp38_ycexu.yaml -p=/home/sabbir/sst-elements-org/CramSim/build /home/sabbir/sst-elements-org/CramSim/c_MemhBridge.cpp
clang-tidy -export-fixes /tmp/tmpata1hy0n/tmpoi72uzdz.yaml -p=/home/sabbir/sst-elements-org/CramSim/build /home/sabbir/sst-elements-org/CramSim/c_TxnDispatcher.cpp
/home/sabbir/sst-elements-org/CramSim/c_TxnDispatcher.cpp:105:23: warning: comparison of integers of different signs: 'int' and 'uint32_t' (aka 'unsigned int') [clang-diagnostic-sign-compare]
    for (int i = 0; i < k_numLanes; i++) {
                      ^
/home/sabbir/sst-elements-org/CramSim/c_TxnDispatcher.cpp:127:40: warning: unused parameter 'clock' [clang-diagnostic-unused-parameter]
bool c_TxnDispatcher::clockTic(Cycle_t clock)
                                       ^
clang-tidy -export-fixes /tmp/tmpata1hy0n/tmphhbeod06.yaml -p=/home/sabbir/sst-elements-org/CramSim/build /home/sabbir/sst-elements-org/CramSim/c_CmdScheduler.cpp
/home/sabbir/sst-elements-org/CramSim/c_CmdScheduler.cpp:45:125: warning: field 'output' will be initialized after field 'm_deviceController' [clang-diagnostic-reorder-ctor]
c_CmdScheduler::c_CmdScheduler(ComponentId_t id, Params &x_params, Output* out, c_DeviceDriver* driver) : SubComponent(id), output(out), m_deviceController(driver) {
                                                                                                                            ^
/home/sabbir/sst-elements-org/CramSim/c_CmdScheduler.cpp:99:16: warning: unused variable 'l_time' [clang-diagnostic-unused-variable]
    SimTime_t  l_time=simCycle;
               ^
clang-tidy -export-fixes /tmp/tmpata1hy0n/tmpprhsc3yj.yaml -p=/home/sabbir/sst-elements-org/CramSim/build /home/sabbir/sst-elements-org/CramSim/c_TxnScheduler.cpp
/home/sabbir/sst-elements-org/CramSim/c_TxnScheduler.cpp:46:36: warning: field 'm_numChannels' will be initialized after field 'm_txnConverter' [clang-diagnostic-reorder-ctor]
    SubComponent(id), output(out), m_numChannels(channels), m_txnConverter(converter), m_cmdScheduler(scheduler) {
                                   ^
/home/sabbir/sst-elements-org/CramSim/c_TxnScheduler.cpp:126:36: warning: unused parameter 'simCycle' [clang-diagnostic-unused-parameter]
void c_TxnScheduler::run(SimTime_t simCycle){
                                   ^
/home/sabbir/sst-elements-org/CramSim/c_TxnScheduler.cpp:129:39: warning: comparison of integers of different signs: 'int' and 'unsigned int' [clang-diagnostic-sign-compare]
    for(int l_channelID=0; l_channelID<m_numChannels; l_channelID++) {
                                      ^
clang-tidy -export-fixes /tmp/tmpata1hy0n/tmply2khd7i.yaml -p=/home/sabbir/sst-elements-org/CramSim/build /home/sabbir/sst-elements-org/CramSim/c_TxnGen.cpp
/home/sabbir/sst-elements-org/CramSim/c_TxnGen.cpp:125:53: warning: format specifies type 'unsigned long long' but the argument has type 'uint64_t' (aka 'unsigned long') [clang-diagnostic-format]
    printf("Total Read-Txns Requests sent: %llu\n", m_resReadCount);
                                           ~~~~     ^
                                           %lu
/home/sabbir/sst-elements-org/CramSim/c_TxnGen.cpp:126:54: warning: format specifies type 'unsigned long long' but the argument has type 'uint64_t' (aka 'unsigned long') [clang-diagnostic-format]
    printf("Total Write-Txns Requests sent: %llu\n", m_resWriteCount);
                                            ~~~~     ^
                                            %lu
/home/sabbir/sst-elements-org/CramSim/c_TxnGen.cpp:127:40: warning: format specifies type 'unsigned long long' but the argument has type 'unsigned long' [clang-diagnostic-format]
    printf("Total Txns Sents: %llu\n", m_resReadCount + m_resWriteCount);
                              ~~~~     ^
                              %lu
/home/sabbir/sst-elements-org/CramSim/c_TxnGen.cpp:129:58: warning: format specifies type 'unsigned long long' but the argument has type 'uint64_t' (aka 'unsigned long') [clang-diagnostic-format]
    printf("Total Read-Txns Responses received: %llu\n", m_resReadCount);
                                                ~~~~     ^
                                                %lu
/home/sabbir/sst-elements-org/CramSim/c_TxnGen.cpp:130:59: warning: format specifies type 'unsigned long long' but the argument has type 'uint64_t' (aka 'unsigned long') [clang-diagnostic-format]
    printf("Total Write-Txns Responses received: %llu\n", m_resWriteCount);
                                                 ~~~~     ^
                                                 %lu
/home/sabbir/sst-elements-org/CramSim/c_TxnGen.cpp:131:43: warning: format specifies type 'unsigned long long' but the argument has type 'unsigned long' [clang-diagnostic-format]
    printf("Total Txns Received: %llu\n", m_resReadCount + m_resWriteCount);
                                 ~~~~     ^
                                 %lu
/home/sabbir/sst-elements-org/CramSim/c_TxnGen.cpp:149:18: warning: comparison of integers of different signs: 'int' and 'uint32_t' (aka 'unsigned int') [clang-diagnostic-sign-compare]
    for(int i=0;i<k_numTxnPerCycle;i++) {
                 ^
/home/sabbir/sst-elements-org/CramSim/c_TxnGen.cpp:161:18: warning: comparison of integers of different signs: 'int' and 'uint32_t' (aka 'unsigned int') [clang-diagnostic-sign-compare]
    for(int i=0;i<k_numTxnPerCycle;i++) {
                 ^
Applying fixes ...
Enabled checks:
    modernize-use-override

clang-apply-replacements version 10.0.0
clang-tidy -checks=-*,modernize-use-override -export-fixes /tmp/tmpcld11kcm/tmpzss54yyt.yaml -p=/home/sabbir/sst-elements-org/CramSim/build /home/sabbir/sst-elements-org/CramSim/c_Bank.cpp
clang-tidy -checks=-*,modernize-use-override -export-fixes /tmp/tmpcld11kcm/tmp31fvizdd.yaml -p=/home/sabbir/sst-elements-org/CramSim/build /home/sabbir/sst-elements-org/CramSim/c_TraceFileReader.cpp
clang-tidy -checks=-*,modernize-use-override -export-fixes /tmp/tmpcld11kcm/tmpfgupjfty.yaml -p=/home/sabbir/sst-elements-org/CramSim/build /home/sabbir/sst-elements-org/CramSim/c_Dimm.cpp
clang-tidy -checks=-*,modernize-use-override -export-fixes /tmp/tmpcld11kcm/tmp316c721t.yaml -p=/home/sabbir/sst-elements-org/CramSim/build /home/sabbir/sst-elements-org/CramSim/CramSim.cpp
clang-tidy -checks=-*,modernize-use-override -export-fixes /tmp/tmpcld11kcm/tmp0t9vm2__.yaml -p=/home/sabbir/sst-elements-org/CramSim/build /home/sabbir/sst-elements-org/CramSim/c_HashedAddress.cpp
clang-tidy -checks=-*,modernize-use-override -export-fixes /tmp/tmpcld11kcm/tmp0h6so1_j.yaml -p=/home/sabbir/sst-elements-org/CramSim/build /home/sabbir/sst-elements-org/CramSim/c_Transaction.cpp
clang-tidy -checks=-*,modernize-use-override -export-fixes /tmp/tmpcld11kcm/tmp53lx25yn.yaml -p=/home/sabbir/sst-elements-org/CramSim/build /home/sabbir/sst-elements-org/CramSim/c_TxnConverter.cpp
clang-tidy -checks=-*,modernize-use-override -export-fixes /tmp/tmpcld11kcm/tmpyzylhp_7.yaml -p=/home/sabbir/sst-elements-org/CramSim/build /home/sabbir/sst-elements-org/CramSim/c_AddressHasher.cpp
clang-tidy -checks=-*,modernize-use-override -export-fixes /tmp/tmpcld11kcm/tmpx6f6wjvv.yaml -p=/home/sabbir/sst-elements-org/CramSim/build /home/sabbir/sst-elements-org/CramSim/c_DeviceDriver.cpp
clang-tidy -checks=-*,modernize-use-override -export-fixes /tmp/tmpcld11kcm/tmp82wwa4uq.yaml -p=/home/sabbir/sst-elements-org/CramSim/build /home/sabbir/sst-elements-org/CramSim/c_BankCommand.cpp
clang-tidy -checks=-*,modernize-use-override -export-fixes /tmp/tmpcld11kcm/tmp9o73yb5d.yaml -p=/home/sabbir/sst-elements-org/CramSim/build /home/sabbir/sst-elements-org/CramSim/c_BankStateActivating.cpp
clang-tidy -checks=-*,modernize-use-override -export-fixes /tmp/tmpcld11kcm/tmpdvt5nzcn.yaml -p=/home/sabbir/sst-elements-org/CramSim/build /home/sabbir/sst-elements-org/CramSim/c_Controller.cpp
clang-tidy -checks=-*,modernize-use-override -export-fixes /tmp/tmpcld11kcm/tmpjaku4osk.yaml -p=/home/sabbir/sst-elements-org/CramSim/build /home/sabbir/sst-elements-org/CramSim/c_BankStateActive.cpp
clang-tidy -checks=-*,modernize-use-override -export-fixes /tmp/tmpcld11kcm/tmpl3esirmi.yaml -p=/home/sabbir/sst-elements-org/CramSim/build /home/sabbir/sst-elements-org/CramSim/c_BankStateIdle.cpp
clang-tidy -checks=-*,modernize-use-override -export-fixes /tmp/tmpcld11kcm/tmpkn1n64cy.yaml -p=/home/sabbir/sst-elements-org/CramSim/build /home/sabbir/sst-elements-org/CramSim/c_BankStatePrecharge.cpp
clang-tidy -checks=-*,modernize-use-override -export-fixes /tmp/tmpcld11kcm/tmpnbi3enxn.yaml -p=/home/sabbir/sst-elements-org/CramSim/build /home/sabbir/sst-elements-org/CramSim/c_BankStateRead.cpp
clang-tidy -checks=-*,modernize-use-override -export-fixes /tmp/tmpcld11kcm/tmpip15z4a_.yaml -p=/home/sabbir/sst-elements-org/CramSim/build /home/sabbir/sst-elements-org/CramSim/c_BankStateReadA.cpp
clang-tidy -checks=-*,modernize-use-override -export-fixes /tmp/tmpcld11kcm/tmpcj6sbh8k.yaml -p=/home/sabbir/sst-elements-org/CramSim/build /home/sabbir/sst-elements-org/CramSim/c_BankStateRefresh.cpp
clang-tidy -checks=-*,modernize-use-override -export-fixes /tmp/tmpcld11kcm/tmp9rdg0_wy.yaml -p=/home/sabbir/sst-elements-org/CramSim/build /home/sabbir/sst-elements-org/CramSim/c_BankStateWrite.cpp
clang-tidy -checks=-*,modernize-use-override -export-fixes /tmp/tmpcld11kcm/tmp_wxz347g.yaml -p=/home/sabbir/sst-elements-org/CramSim/build /home/sabbir/sst-elements-org/CramSim/c_BankStateWriteA.cpp
clang-tidy -checks=-*,modernize-use-override -export-fixes /tmp/tmpcld11kcm/tmpahc8_jtu.yaml -p=/home/sabbir/sst-elements-org/CramSim/build /home/sabbir/sst-elements-org/CramSim/c_Rank.cpp
clang-tidy -checks=-*,modernize-use-override -export-fixes /tmp/tmpcld11kcm/tmpucqehz7x.yaml -p=/home/sabbir/sst-elements-org/CramSim/build /home/sabbir/sst-elements-org/CramSim/c_Channel.cpp
clang-tidy -checks=-*,modernize-use-override -export-fixes /tmp/tmpcld11kcm/tmpjbrz7zgy.yaml -p=/home/sabbir/sst-elements-org/CramSim/build /home/sabbir/sst-elements-org/CramSim/c_BankGroup.cpp
clang-tidy -checks=-*,modernize-use-override -export-fixes /tmp/tmpcld11kcm/tmpxnrnpulq.yaml -p=/home/sabbir/sst-elements-org/CramSim/build /home/sabbir/sst-elements-org/CramSim/c_BankInfo.cpp
clang-tidy -checks=-*,modernize-use-override -export-fixes /tmp/tmpcld11kcm/tmp12j5n03p.yaml -p=/home/sabbir/sst-elements-org/CramSim/build /home/sabbir/sst-elements-org/CramSim/c_MemhBridge.cpp
clang-tidy -checks=-*,modernize-use-override -export-fixes /tmp/tmpcld11kcm/tmpofel3wx5.yaml -p=/home/sabbir/sst-elements-org/CramSim/build /home/sabbir/sst-elements-org/CramSim/c_TxnScheduler.cpp
clang-tidy -checks=-*,modernize-use-override -export-fixes /tmp/tmpcld11kcm/tmppr4_94_k.yaml -p=/home/sabbir/sst-elements-org/CramSim/build /home/sabbir/sst-elements-org/CramSim/c_TxnDispatcher.cpp
clang-tidy -checks=-*,modernize-use-override -export-fixes /tmp/tmpcld11kcm/tmpvq88cu67.yaml -p=/home/sabbir/sst-elements-org/CramSim/build /home/sabbir/sst-elements-org/CramSim/c_CmdScheduler.cpp
clang-tidy -checks=-*,modernize-use-override -export-fixes /tmp/tmpcld11kcm/tmptj47o_2o.yaml -p=/home/sabbir/sst-elements-org/CramSim/build /home/sabbir/sst-elements-org/CramSim/c_TxnGen.cpp
Applying fixes ...
