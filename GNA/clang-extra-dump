Enabled checks:
    clang-analyzer-apiModeling.StdCLibraryFunctions
    clang-analyzer-apiModeling.TrustNonnull
    clang-analyzer-apiModeling.google.GTest
    clang-analyzer-apiModeling.llvm.CastValue
    clang-analyzer-apiModeling.llvm.ReturnValue
    clang-analyzer-core.CallAndMessage
    clang-analyzer-core.DivideZero
    clang-analyzer-core.DynamicTypePropagation
    clang-analyzer-core.NonNullParamChecker
    clang-analyzer-core.NonnilStringConstants
    clang-analyzer-core.NullDereference
    clang-analyzer-core.StackAddrEscapeBase
    clang-analyzer-core.StackAddressEscape
    clang-analyzer-core.UndefinedBinaryOperatorResult
    clang-analyzer-core.VLASize
    clang-analyzer-core.builtin.BuiltinFunctions
    clang-analyzer-core.builtin.NoReturnFunctions
    clang-analyzer-core.uninitialized.ArraySubscript
    clang-analyzer-core.uninitialized.Assign
    clang-analyzer-core.uninitialized.Branch
    clang-analyzer-core.uninitialized.CapturedBlockVariable
    clang-analyzer-core.uninitialized.UndefReturn
    clang-analyzer-cplusplus.InnerPointer
    clang-analyzer-cplusplus.Move
    clang-analyzer-cplusplus.NewDelete
    clang-analyzer-cplusplus.NewDeleteLeaks
    clang-analyzer-cplusplus.PureVirtualCall
    clang-analyzer-cplusplus.SelfAssignment
    clang-analyzer-cplusplus.SmartPtr
    clang-analyzer-cplusplus.VirtualCallModeling
    clang-analyzer-deadcode.DeadStores
    clang-analyzer-fuchsia.HandleChecker
    clang-analyzer-nullability.NullPassedToNonnull
    clang-analyzer-nullability.NullReturnedFromNonnull
    clang-analyzer-nullability.NullabilityBase
    clang-analyzer-nullability.NullableDereferenced
    clang-analyzer-nullability.NullablePassedToNonnull
    clang-analyzer-nullability.NullableReturnedFromNonnull
    clang-analyzer-optin.cplusplus.UninitializedObject
    clang-analyzer-optin.cplusplus.VirtualCall
    clang-analyzer-optin.mpi.MPI-Checker
    clang-analyzer-optin.osx.OSObjectCStyleCast
    clang-analyzer-optin.osx.cocoa.localizability.EmptyLocalizationContextChecker
    clang-analyzer-optin.osx.cocoa.localizability.NonLocalizedStringChecker
    clang-analyzer-optin.performance.GCDAntipattern
    clang-analyzer-optin.performance.Padding
    clang-analyzer-optin.portability.UnixAPI
    clang-analyzer-osx.API
    clang-analyzer-osx.MIG
    clang-analyzer-osx.NSOrCFErrorDerefChecker
    clang-analyzer-osx.NumberObjectConversion
    clang-analyzer-osx.OSObjectRetainCount
    clang-analyzer-osx.ObjCProperty
    clang-analyzer-osx.SecKeychainAPI
    clang-analyzer-osx.cocoa.AtSync
    clang-analyzer-osx.cocoa.AutoreleaseWrite
    clang-analyzer-osx.cocoa.ClassRelease
    clang-analyzer-osx.cocoa.Dealloc
    clang-analyzer-osx.cocoa.IncompatibleMethodTypes
    clang-analyzer-osx.cocoa.Loops
    clang-analyzer-osx.cocoa.MissingSuperCall
    clang-analyzer-osx.cocoa.NSAutoreleasePool
    clang-analyzer-osx.cocoa.NSError
    clang-analyzer-osx.cocoa.NilArg
    clang-analyzer-osx.cocoa.NonNilReturnValue
    clang-analyzer-osx.cocoa.ObjCGenerics
    clang-analyzer-osx.cocoa.RetainCount
    clang-analyzer-osx.cocoa.RetainCountBase
    clang-analyzer-osx.cocoa.RunLoopAutoreleaseLeak
    clang-analyzer-osx.cocoa.SelfInit
    clang-analyzer-osx.cocoa.SuperDealloc
    clang-analyzer-osx.cocoa.UnusedIvars
    clang-analyzer-osx.cocoa.VariadicMethodTypes
    clang-analyzer-osx.coreFoundation.CFError
    clang-analyzer-osx.coreFoundation.CFNumber
    clang-analyzer-osx.coreFoundation.CFRetainRelease
    clang-analyzer-osx.coreFoundation.containers.OutOfBounds
    clang-analyzer-osx.coreFoundation.containers.PointerSizedValues
    clang-analyzer-security.FloatLoopCounter
    clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling
    clang-analyzer-security.insecureAPI.SecuritySyntaxChecker
    clang-analyzer-security.insecureAPI.UncheckedReturn
    clang-analyzer-security.insecureAPI.bcmp
    clang-analyzer-security.insecureAPI.bcopy
    clang-analyzer-security.insecureAPI.bzero
    clang-analyzer-security.insecureAPI.decodeValueOfObjCType
    clang-analyzer-security.insecureAPI.getpw
    clang-analyzer-security.insecureAPI.gets
    clang-analyzer-security.insecureAPI.mkstemp
    clang-analyzer-security.insecureAPI.mktemp
    clang-analyzer-security.insecureAPI.rand
    clang-analyzer-security.insecureAPI.strcpy
    clang-analyzer-security.insecureAPI.vfork
    clang-analyzer-unix.API
    clang-analyzer-unix.DynamicMemoryModeling
    clang-analyzer-unix.Malloc
    clang-analyzer-unix.MallocSizeof
    clang-analyzer-unix.MismatchedDeallocator
    clang-analyzer-unix.Vfork
    clang-analyzer-unix.cstring.BadSizeArg
    clang-analyzer-unix.cstring.CStringModeling
    clang-analyzer-unix.cstring.NullArg
    clang-analyzer-valist.CopyToSelf
    clang-analyzer-valist.Uninitialized
    clang-analyzer-valist.Unterminated
    clang-analyzer-valist.ValistBase
    misc-unused-alias-decls
    misc-unused-parameters
    misc-unused-using-decls
    modernize-avoid-bind
    modernize-avoid-c-arrays
    modernize-concat-nested-namespaces
    modernize-deprecated-headers
    modernize-deprecated-ios-base-aliases
    modernize-loop-convert
    modernize-make-shared
    modernize-make-unique
    modernize-pass-by-value
    modernize-raw-string-literal
    modernize-redundant-void-arg
    modernize-replace-auto-ptr
    modernize-replace-random-shuffle
    modernize-return-braced-init-list
    modernize-shrink-to-fit
    modernize-unary-static-assert
    modernize-use-auto
    modernize-use-bool-literals
    modernize-use-default-member-init
    modernize-use-emplace
    modernize-use-equals-default
    modernize-use-equals-delete
    modernize-use-nodiscard
    modernize-use-noexcept
    modernize-use-nullptr
    modernize-use-transparent-functors
    modernize-use-uncaught-exceptions
    modernize-use-using

clang-apply-replacements version 10.0.0
clang-tidy -header-filter=/home/sabbir/sst-elements-org/GNA/* -export-fixes /tmp/tmp1ni81azp/tmpgp8py97i.yaml -p=/home/sabbir/sst-elements-org/GNA/build /home/sabbir/sst-elements-org/GNA/sts.cc
/home/sabbir/sst-elements-org/GNA/GNA.h:22:10: warning: inclusion of deprecated C++ header 'inttypes.h'; consider using 'cinttypes' instead [modernize-deprecated-headers]
#include <inttypes.h>
         ^~~~~~~~~~~~
         <cinttypes>
/home/sabbir/sst-elements-org/GNA/GNA.h:110:5: warning: use 'using' instead of 'typedef' [modernize-use-using]
    typedef multimap<const uint, Ctrl_And_Stat_Types::T_BwpFl> BWPBuf_t;
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    using BWPBuf_t = multimap<const uint, Ctrl_And_Stat_Types::T_BwpFl>
/home/sabbir/sst-elements-org/GNA/gna_lib.h:42:3: warning: use 'using' instead of 'typedef' [modernize-use-using]
  typedef struct {
  ^~~~~~~~~~~~~~~~
/home/sabbir/sst-elements-org/GNA/gna_lib.h:54:3: warning: use 'using' instead of 'typedef' [modernize-use-using]
  typedef struct {
  ^~~~~~~~~~~~~~~~
/home/sabbir/sst-elements-org/GNA/gna_lib.h:66:3: warning: use 'using' instead of 'typedef' [modernize-use-using]
  typedef struct {
  ^~~~~~~~~~~~~~~~
/home/sabbir/sst-elements-org/GNA/gna_lib.h:76:3: warning: use 'using' instead of 'typedef' [modernize-use-using]
  typedef struct {
  ^~~~~~~~~~~~~~~~
/home/sabbir/sst-elements-org/GNA/gna_lib.h:83:3: warning: use 'using' instead of 'typedef' [modernize-use-using]
  typedef struct {
  ^~~~~~~~~~~~~~~~
/home/sabbir/sst-elements-org/GNA/neuron.h:68:5: warning: use 'using' instead of 'typedef' [modernize-use-using]
    typedef map<const uint, float> tBuf_t;
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    using tBuf_t = map<const uint, float>
/home/sabbir/sst-elements-org/GNA/neuron.h:68:42: warning: use 'using' instead of 'typedef' [modernize-use-using]
    typedef map<const uint, float> tBuf_t;
                                         ^
/home/sabbir/sst-elements-org/GNA/neuron.h:76:9: warning: use auto when declaring iterators [modernize-use-auto]
        tBuf_t::iterator i = temporalBuffer.find(now);
        ^~~~~~~~~~~~~~~~
        auto
/home/sabbir/sst-elements-org/GNA/sts.cc:33:9: warning: use auto when initializing with new to avoid duplicating the type name [modernize-use-auto]
        SimpleMem::Request *req =
        ^~~~~~~~~~~~~~~~~~
        auto
/home/sabbir/sst-elements-org/GNA/sts.h:22:10: warning: inclusion of deprecated C++ header 'inttypes.h'; consider using 'cinttypes' instead [modernize-deprecated-headers]
#include <inttypes.h>
         ^~~~~~~~~~~~
         <cinttypes>
clang-tidy -header-filter=/home/sabbir/sst-elements-org/GNA/* -export-fixes /tmp/tmp1ni81azp/tmp67w1y5et.yaml -p=/home/sabbir/sst-elements-org/GNA/build /home/sabbir/sst-elements-org/GNA/GNA.cc
/home/sabbir/sst-elements-org/GNA/GNA.cc:31:5: warning: use auto when initializing with a template cast to avoid duplicating the type name [modernize-use-auto]
    uint32_t outputLevel = params.find<uint32_t>("verbose", 0);
    ^~~~~~~~
    auto
/home/sabbir/sst-elements-org/GNA/GNA.cc:66:12: warning: Potential memory leak [clang-analyzer-cplusplus.NewDeleteLeaks]
    memory = loadUserSubComponent<Interfaces::SimpleMem>("memory", ComponentInfo::SHARE_NONE, clockTC, new Interfaces::SimpleMem::Handler<GNA>(this, &GNA::handleEvent));
           ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:36:9: note: Field 'numNeurons' is > 0
    if (numNeurons <= 0) {
        ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:36:5: note: Taking false branch
    if (numNeurons <= 0) {
    ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:40:9: note: Field 'BWPpTic' is > 0
    if (BWPpTic <= 0) {
        ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:40:5: note: Taking false branch
    if (BWPpTic <= 0) {
    ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:44:9: note: Field 'BWPpTic' is > 0
    if (BWPpTic <= 0) {
        ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:44:5: note: Taking false branch
    if (BWPpTic <= 0) {
    ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:48:9: note: Field 'BWPpTic' is > 0
    if (BWPpTic <= 0) {
        ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:48:5: note: Taking false branch
    if (BWPpTic <= 0) {
    ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:52:9: note: Field 'BWPpTic' is > 0
    if (BWPpTic <= 0) {
        ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:52:5: note: Taking false branch
    if (BWPpTic <= 0) {
    ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:66:104: note: Memory is allocated
    memory = loadUserSubComponent<Interfaces::SimpleMem>("memory", ComponentInfo::SHARE_NONE, clockTC, new Interfaces::SimpleMem::Handler<GNA>(this, &GNA::handleEvent));
                                                                                                       ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:66:12: note: Potential memory leak
    memory = loadUserSubComponent<Interfaces::SimpleMem>("memory", ComponentInfo::SHARE_NONE, clockTC, new Interfaces::SimpleMem::Handler<GNA>(this, &GNA::handleEvent));
           ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:69:16: warning: Potential memory leak [clang-analyzer-cplusplus.NewDeleteLeaks]
        memory = loadAnonymousSubComponent<Interfaces::SimpleMem>("memHierarchy.memInterface", "memory", 0,
               ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:36:9: note: Field 'numNeurons' is > 0
    if (numNeurons <= 0) {
        ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:36:5: note: Taking false branch
    if (numNeurons <= 0) {
    ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:40:9: note: Field 'BWPpTic' is > 0
    if (BWPpTic <= 0) {
        ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:40:5: note: Taking false branch
    if (BWPpTic <= 0) {
    ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:44:9: note: Field 'BWPpTic' is > 0
    if (BWPpTic <= 0) {
        ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:44:5: note: Taking false branch
    if (BWPpTic <= 0) {
    ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:48:9: note: Field 'BWPpTic' is > 0
    if (BWPpTic <= 0) {
        ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:48:5: note: Taking false branch
    if (BWPpTic <= 0) {
    ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:52:9: note: Field 'BWPpTic' is > 0
    if (BWPpTic <= 0) {
        ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:52:5: note: Taking false branch
    if (BWPpTic <= 0) {
    ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:67:9: note: Assuming field 'memory' is null
    if (!memory) {
        ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:67:5: note: Taking true branch
    if (!memory) {
    ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:70:62: note: Memory is allocated
                ComponentInfo::SHARE_PORTS, params, clockTC, new Interfaces::SimpleMem::Handler<GNA>(this, &GNA::handleEvent));
                                                             ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:69:16: note: Potential memory leak
        memory = loadAnonymousSubComponent<Interfaces::SimpleMem>("memHierarchy.memInterface", "memory", 0,
               ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:96:18: warning: use emplace_back instead of push_back [modernize-use-emplace]
        STSUnits.push_back(STS(this,i));
                 ^~~~~~~~~~~~~~      ~
                 emplace_back(
/home/sabbir/sst-elements-org/GNA/GNA.cc:135:22: warning: converting integer literal to bool, use bool literal instead [modernize-use-bool-literals]
        bool local = 1;
                     ^
                     true
/home/sabbir/sst-elements-org/GNA/GNA.cc:138:57: warning: converting integer literal to bool, use bool literal instead [modernize-use-bool-literals]
            if (rng.generateNextUInt32() % 100) local = 0;
                                                        ^
                                                        false
/home/sabbir/sst-elements-org/GNA/GNA.cc:141:21: warning: converting integer literal to bool, use bool literal instead [modernize-use-bool-literals]
            local = 1;
                    ^
                    true
/home/sabbir/sst-elements-org/GNA/GNA.cc:164:13: warning: use auto when initializing with new to avoid duplicating the type name [modernize-use-auto]
            SimpleMem::Request *req =
            ^~~~~~~~~~~~~~~~~~
            auto
/home/sabbir/sst-elements-org/GNA/GNA.cc:213:5: warning: use auto when initializing with a cast to avoid duplicating the type name [modernize-use-auto]
    Ctrl_And_Stat_Types::T_BwpFl* bwpl = (Ctrl_And_Stat_Types::T_BwpFl*)calloc(bwpl_len,sizeof(Ctrl_And_Stat_Types::T_BwpFl));
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
    auto
/home/sabbir/sst-elements-org/GNA/GNA.cc:222:1: warning: Potential leak of memory pointed to by 'bwpl' [clang-analyzer-unix.Malloc]
}
^
/home/sabbir/sst-elements-org/GNA/GNA.cc:90:9: note: Assuming 'phase' is equal to 0
    if (phase != 0) {
        ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:90:5: note: Taking false branch
    if (phase != 0) {
    ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:95:20: note: Assuming 'i' is >= field 'STSParallelism'
    for(int i = 0; i < STSParallelism; ++i) {
                   ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:95:5: note: Loop condition is false. Execution continues on line 100
    for(int i = 0; i < STSParallelism; ++i) {
    ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:120:24: note: 'nrn_num' is < field 'numNeurons'
    for (int nrn_num=0;nrn_num<numNeurons;nrn_num++) {
                       ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:120:5: note: Loop condition is true.  Entering loop body
    for (int nrn_num=0;nrn_num<numNeurons;nrn_num++) {
    ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:120:24: note: Assuming 'nrn_num' is >= field 'numNeurons'
    for (int nrn_num=0;nrn_num<numNeurons;nrn_num++) {
                       ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:120:5: note: Loop condition is false. Execution continues on line 128
    for (int nrn_num=0;nrn_num<numNeurons;nrn_num++) {
    ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:130:5: note: Loop condition is true.  Entering loop body
    for (int n = 0; n < numNeurons; ++n) {
    ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:136:13: note: Assuming 'roll' is not equal to 0
        if (roll == 0) {
            ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:136:9: note: Taking false branch
        if (roll == 0) {
        ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:146:24: note: Assuming 'nn' is >= 'numCon'
        for (int nn=0; nn<numCon; ++nn) {
                       ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:146:9: note: Loop condition is false. Execution continues on line 185
        for (int nn=0; nn<numCon; ++nn) {
        ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:185:9: note: '?' condition is true
        assert(sizeof(T_Wme) == 8);
        ^
/usr/include/assert.h:93:7: note: expanded from macro 'assert'
     (static_cast <bool> (expr)                                         \
      ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:130:5: note: Loop condition is false. Execution continues on line 189
    for (int n = 0; n < numNeurons; ++n) {
    ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:213:73: note: Memory is allocated
    Ctrl_And_Stat_Types::T_BwpFl* bwpl = (Ctrl_And_Stat_Types::T_BwpFl*)calloc(bwpl_len,sizeof(Ctrl_And_Stat_Types::T_BwpFl));
                                                                        ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:214:5: note: Loop condition is true.  Entering loop body
    for (int i = 0; i < bwpl_len; ++i) {
    ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:214:5: note: Loop condition is true.  Entering loop body
/home/sabbir/sst-elements-org/GNA/GNA.cc:214:5: note: Loop condition is false. Execution continues on line 219
/home/sabbir/sst-elements-org/GNA/GNA.cc:219:5: note: Loop condition is true.  Entering loop body
    for (int i = 0; i < bwpl_len; ++i) {
    ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:219:5: note: Loop condition is true.  Entering loop body
/home/sabbir/sst-elements-org/GNA/GNA.cc:219:5: note: Loop condition is false. Execution continues on line 82
/home/sabbir/sst-elements-org/GNA/GNA.cc:222:1: note: Potential leak of memory pointed to by 'bwpl'
}
^
/home/sabbir/sst-elements-org/GNA/GNA.cc:227:5: warning: use auto when declaring iterators [modernize-use-auto]
    std::map<uint64_t, STS*>::iterator i = requests.find(req->id);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    auto
/home/sabbir/sst-elements-org/GNA/GNA.cc:255:9: warning: use auto when declaring iterators [modernize-use-auto]
        BWPBuf_t::iterator i = BWPs.find(now);
        ^~~~~~~~~~~~~~~~~~
        auto
/home/sabbir/sst-elements-org/GNA/GNA.h:22:10: warning: inclusion of deprecated C++ header 'inttypes.h'; consider using 'cinttypes' instead [modernize-deprecated-headers]
#include <inttypes.h>
         ^~~~~~~~~~~~
         <cinttypes>
/home/sabbir/sst-elements-org/GNA/GNA.h:81:5: warning: use '= delete' to prohibit calling of a special member function [modernize-use-equals-delete]
    GNA(const GNA&); // do not implement
    ^
                    = delete
/home/sabbir/sst-elements-org/GNA/GNA.h:82:10: warning: use '= delete' to prohibit calling of a special member function [modernize-use-equals-delete]
    void operator=(const GNA&); // do not implement
         ^
                               = delete
/home/sabbir/sst-elements-org/GNA/GNA.h:110:5: warning: use 'using' instead of 'typedef' [modernize-use-using]
    typedef multimap<const uint, Ctrl_And_Stat_Types::T_BwpFl> BWPBuf_t;
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    using BWPBuf_t = multimap<const uint, Ctrl_And_Stat_Types::T_BwpFl>
/home/sabbir/sst-elements-org/GNA/gna_lib.h:42:3: warning: use 'using' instead of 'typedef' [modernize-use-using]
  typedef struct {
  ^~~~~~~~~~~~~~~~
/home/sabbir/sst-elements-org/GNA/gna_lib.h:54:3: warning: use 'using' instead of 'typedef' [modernize-use-using]
  typedef struct {
  ^~~~~~~~~~~~~~~~
/home/sabbir/sst-elements-org/GNA/gna_lib.h:66:3: warning: use 'using' instead of 'typedef' [modernize-use-using]
  typedef struct {
  ^~~~~~~~~~~~~~~~
/home/sabbir/sst-elements-org/GNA/gna_lib.h:76:3: warning: use 'using' instead of 'typedef' [modernize-use-using]
  typedef struct {
  ^~~~~~~~~~~~~~~~
/home/sabbir/sst-elements-org/GNA/gna_lib.h:83:3: warning: use 'using' instead of 'typedef' [modernize-use-using]
  typedef struct {
  ^~~~~~~~~~~~~~~~
/home/sabbir/sst-elements-org/GNA/neuron.h:68:5: warning: use 'using' instead of 'typedef' [modernize-use-using]
    typedef map<const uint, float> tBuf_t;
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    using tBuf_t = map<const uint, float>
/home/sabbir/sst-elements-org/GNA/neuron.h:76:9: warning: use auto when declaring iterators [modernize-use-auto]
        tBuf_t::iterator i = temporalBuffer.find(now);
        ^~~~~~~~~~~~~~~~
        auto
/home/sabbir/sst-elements-org/GNA/sts.h:22:10: warning: inclusion of deprecated C++ header 'inttypes.h'; consider using 'cinttypes' instead [modernize-deprecated-headers]
#include <inttypes.h>
         ^~~~~~~~~~~~
         <cinttypes>
Applying fixes ...
Enabled checks:
    modernize-use-override

clang-apply-replacements version 10.0.0
clang-tidy -header-filter=/home/sabbir/sst-elements-org/GNA/* -checks=-*,modernize-use-override -export-fixes /tmp/tmpln7yx15v/tmpuz3ds226.yaml -p=/home/sabbir/sst-elements-org/GNA/build /home/sabbir/sst-elements-org/GNA/sts.cc
/home/sabbir/sst-elements-org/GNA/GNA.h:64:10: warning: annotate this function with 'override' or (rarely) 'final' [modernize-use-override]
    void finish() {
         ^
                  override
/home/sabbir/sst-elements-org/GNA/GNA.h:83:10: warning: annotate this function with 'override' or (rarely) 'final' [modernize-use-override]
    void init(unsigned int phase);
         ^
                                  override
clang-tidy -header-filter=/home/sabbir/sst-elements-org/GNA/* -checks=-*,modernize-use-override -export-fixes /tmp/tmpln7yx15v/tmpdt1slgii.yaml -p=/home/sabbir/sst-elements-org/GNA/build /home/sabbir/sst-elements-org/GNA/GNA.cc
/home/sabbir/sst-elements-org/GNA/GNA.h:64:10: warning: annotate this function with 'override' or (rarely) 'final' [modernize-use-override]
    void finish() {
         ^
                  override
/home/sabbir/sst-elements-org/GNA/GNA.h:83:10: warning: annotate this function with 'override' or (rarely) 'final' [modernize-use-override]
    void init(unsigned int phase);
         ^
                                  override
Applying fixes ...
